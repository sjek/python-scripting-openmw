#include <string>

#include <components/interpreter/types.hpp>
namespace MWScriptExtensions
{
    void activate();
    void additem(std::string arg0, Interpreter::Type_Integer arg1);
    void addsoulgem(std::string arg0, std::string arg1);
    void addspell(std::string arg0);
    void addtolevcreature(std::string arg0, std::string arg1, Interpreter::Type_Integer arg2);
    void addtolevitem(std::string arg0, std::string arg1, Interpreter::Type_Integer arg2);
    void addtopic(std::string arg0);
    void aiactivate(std::string arg0, Interpreter::Type_Integer arg1=-123456);
    void aiescort(std::string arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2, Interpreter::Type_Float arg3, Interpreter::Type_Float arg4, Interpreter::Type_Integer arg5=-123456);
    void aiescortcell(std::string arg0, std::string arg1, Interpreter::Type_Float arg2, Interpreter::Type_Float arg3, Interpreter::Type_Float arg4, Interpreter::Type_Float arg5, Interpreter::Type_Integer arg6=-123456);
    void aifollow(std::string arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2, Interpreter::Type_Float arg3, Interpreter::Type_Float arg4, Interpreter::Type_Integer arg5=-123456, Interpreter::Type_Integer arg6=-123456, Interpreter::Type_Integer arg7=-123456, Interpreter::Type_Integer arg8=-123456, Interpreter::Type_Integer arg9=-123456, Interpreter::Type_Integer arg10=-123456, Interpreter::Type_Integer arg11=-123456, Interpreter::Type_Integer arg12=-123456);
    void aifollowcell(std::string arg0, std::string arg1, Interpreter::Type_Float arg2, Interpreter::Type_Float arg3, Interpreter::Type_Float arg4, Interpreter::Type_Float arg5, Interpreter::Type_Integer arg6=-123456);
    void aitravel(Interpreter::Type_Float arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2, Interpreter::Type_Integer arg3=-123456);
    void aiwander(Interpreter::Type_Float arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2, Interpreter::Type_Integer arg3=-123456, Interpreter::Type_Integer arg4=-123456, Interpreter::Type_Integer arg5=-123456, Interpreter::Type_Integer arg6=-123456, Interpreter::Type_Integer arg7=-123456, Interpreter::Type_Integer arg8=-123456, Interpreter::Type_Integer arg9=-123456, Interpreter::Type_Integer arg10=-123456, Interpreter::Type_Integer arg11=-123456, Interpreter::Type_Integer arg12=-123456);
    void bc(std::string arg0);
    void becomewerewolf();
    void betacomment(std::string arg0);
    void cast(std::string arg0, std::string arg1);
    Interpreter::Type_Integer cellchanged();
    void centeroncell(std::string arg0);
    void centeronexterior(Interpreter::Type_Integer arg0, Interpreter::Type_Integer arg1);
    void changeweather(std::string arg0, Interpreter::Type_Integer arg1);
    void choice(std::string arg0="OPTIONAL_FLAG", Interpreter::Type_Integer arg1=-123456, std::string arg2="OPTIONAL_FLAG", Interpreter::Type_Integer arg3=-123456, std::string arg4="OPTIONAL_FLAG", Interpreter::Type_Integer arg5=-123456, std::string arg6="OPTIONAL_FLAG", Interpreter::Type_Integer arg7=-123456, std::string arg8="OPTIONAL_FLAG", Interpreter::Type_Integer arg9=-123456, std::string arg10="OPTIONAL_FLAG", Interpreter::Type_Integer arg11=-123456, std::string arg12="OPTIONAL_FLAG", Interpreter::Type_Integer arg13=-123456, std::string arg14="OPTIONAL_FLAG", Interpreter::Type_Integer arg15=-123456, std::string arg16="OPTIONAL_FLAG", Interpreter::Type_Integer arg17=-123456, std::string arg18="OPTIONAL_FLAG", Interpreter::Type_Integer arg19=-123456, std::string arg20="OPTIONAL_FLAG", Interpreter::Type_Integer arg21=-123456, std::string arg22="OPTIONAL_FLAG", Interpreter::Type_Integer arg23=-123456, std::string arg24="OPTIONAL_FLAG", Interpreter::Type_Integer arg25=-123456, std::string arg26="OPTIONAL_FLAG", Interpreter::Type_Integer arg27=-123456, std::string arg28="OPTIONAL_FLAG", Interpreter::Type_Integer arg29=-123456, std::string arg30="OPTIONAL_FLAG", Interpreter::Type_Integer arg31=-123456);
    void clearforcejump();
    void clearforcemovejump();
    void clearforcerun();
    void clearforcesneak();
    void clearinfoactor();
    void coc(std::string arg0);
    void coe(Interpreter::Type_Integer arg0, Interpreter::Type_Integer arg1);
    void disablelevitation();
    void disableplayercontrols();
    void disableplayerfighting();
    void disableplayerjumping();
    void disableplayerlooking();
    void disableplayermagic();
    void disableplayerviewswitch();
    void disableteleporting();
    void disablevanitymode();
    void dontsaveobject();
    void drop(std::string arg0, Interpreter::Type_Integer arg1);
    void dropsoulgem(std::string arg0);
    void enablebirthmenu();
    void enableclassmenu();
    void enableinventorymenu();
    void enablelevelupmenu();
    void enablelevitation();
    void enablemagicmenu();
    void enablemapmenu();
    void enablenamemenu();
    void enableplayercontrols();
    void enableplayerfighting();
    void enableplayerjumping();
    void enableplayerlooking();
    void enableplayermagic();
    void enableplayerviewswitch();
    void enableracemenu();
    void enablerest();
    void enablestatreviewmenu();
    void enablestatsmenu();
    void enableteleporting();
    void enablevanitymode();
    void equip(std::string arg0);
    void explodespell(std::string arg0);
    void face(Interpreter::Type_Integer arg0, Interpreter::Type_Integer arg1);
    void fadein(Interpreter::Type_Float arg0);
    void fadeout(Interpreter::Type_Float arg0);
    void fadeto(Interpreter::Type_Float arg0, Interpreter::Type_Float arg1);
    void fall();
    void fillmap();
    void forcegreeting();
    void forcejump();
    void forcemovejump();
    void forcerun();
    void forcesneak();
    Interpreter::Type_Integer getacrobatics();
    Interpreter::Type_Integer getagility();
    Interpreter::Type_Integer getaipackagedone();
    Interpreter::Type_Integer getalarm();
    Interpreter::Type_Integer getalchemy();
    Interpreter::Type_Integer getalteration();
    Interpreter::Type_Float getangle(std::string arg0);
    Interpreter::Type_Integer getarmorbonus();
    Interpreter::Type_Integer getarmorer();
    Interpreter::Type_Integer getarmortype(Interpreter::Type_Integer arg0);
    Interpreter::Type_Integer getathletics();
    Interpreter::Type_Integer getattackbonus();
    Interpreter::Type_Integer getattacked();
    Interpreter::Type_Integer getaxe();
    Interpreter::Type_Integer getblightdisease();
    Interpreter::Type_Integer getblindness();
    Interpreter::Type_Integer getblock();
    Interpreter::Type_Integer getbluntweapon();
    Interpreter::Type_Integer getbuttonpressed();
    Interpreter::Type_Integer getcastpenalty();
    Interpreter::Type_Integer getchameleon();
    Interpreter::Type_Integer getcollidingactor();
    Interpreter::Type_Integer getcollidingpc();
    Interpreter::Type_Integer getcommondisease();
    Interpreter::Type_Integer getconjuration();
    Interpreter::Type_Integer getcurrentaipackage();
    Interpreter::Type_Float getcurrenttime();
    Interpreter::Type_Integer getcurrentweather();
    Interpreter::Type_Integer getdeadcount(std::string arg0);
    Interpreter::Type_Integer getdefendbonus();
    Interpreter::Type_Integer getdestruction();
    Interpreter::Type_Integer getdetected(std::string arg0);
    Interpreter::Type_Integer getdisposition();
    Interpreter::Type_Integer geteffect(std::string arg0);
    Interpreter::Type_Integer getenchant();
    Interpreter::Type_Integer getendurance();
    Interpreter::Type_Integer getfactionreaction(std::string arg0, std::string arg1);
    Interpreter::Type_Float getfatigue();
    Interpreter::Type_Float getfatiguegetratio();
    Interpreter::Type_Integer getfight();
    Interpreter::Type_Integer getflee();
    Interpreter::Type_Integer getflying();
    Interpreter::Type_Integer getforcejump();
    Interpreter::Type_Integer getforcemovejump();
    Interpreter::Type_Integer getforcerun();
    Interpreter::Type_Integer getforcesneak();
    Interpreter::Type_Integer gethandtohand();
    Interpreter::Type_Float gethealth();
    Interpreter::Type_Float gethealthgetratio();
    Interpreter::Type_Integer getheavyarmor();
    Interpreter::Type_Integer gethello();
    Interpreter::Type_Integer getillusion();
    Interpreter::Type_Integer getintelligence();
    Interpreter::Type_Integer getinterior();
    Interpreter::Type_Integer getinvisible();
    Interpreter::Type_Integer getitemcount(std::string arg0);
    Interpreter::Type_Integer getjournalindex(std::string arg0);
    Interpreter::Type_Integer getlevel();
    Interpreter::Type_Integer getlightarmor();
    Interpreter::Type_Integer getlineofsight(std::string arg0);
    Interpreter::Type_Integer getlocked();
    Interpreter::Type_Integer getlongblade();
    Interpreter::Type_Integer getlos(std::string arg0);
    Interpreter::Type_Integer getluck();
    Interpreter::Type_Float getmagicka();
    Interpreter::Type_Float getmagickagetratio();
    Interpreter::Type_Integer getmarksman();
    Interpreter::Type_Integer getmasserphase();
    Interpreter::Type_Integer getmediumarmor();
    Interpreter::Type_Integer getmercantile();
    Interpreter::Type_Integer getmysticism();
    Interpreter::Type_Integer getparalysis();
    Interpreter::Type_Integer getpccell(std::string arg0);
    Interpreter::Type_Float getpccrimelevel();
    Interpreter::Type_Integer getpcfacrep(std::string arg0="OPTIONAL_FLAG");
    Interpreter::Type_Integer getpcinjail();
    Interpreter::Type_Integer getpcjumping();
    Interpreter::Type_Integer getpcrank(std::string arg0="OPTIONAL_FLAG");
    Interpreter::Type_Integer getpcrunning();
    Interpreter::Type_Integer getpcsleep();
    Interpreter::Type_Integer getpcsneaking();
    Interpreter::Type_Integer getpctraveling();
    Interpreter::Type_Integer getpersonality();
    Interpreter::Type_Integer getplayercontrolsdisabled();
    Interpreter::Type_Integer getplayerfightingdisabled();
    Interpreter::Type_Integer getplayerjumpingdisabled();
    Interpreter::Type_Integer getplayerlookingdisabled();
    Interpreter::Type_Integer getplayermagicdisabled();
    Interpreter::Type_Integer getplayerviewswitchdisabled();
    Interpreter::Type_Float getpos(std::string arg0);
    Interpreter::Type_Integer getrace(std::string arg0);
    Interpreter::Type_Integer getreputation();
    Interpreter::Type_Integer getresistblight();
    Interpreter::Type_Integer getresistcorprus();
    Interpreter::Type_Integer getresistdisease();
    Interpreter::Type_Integer getresistfire();
    Interpreter::Type_Integer getresistfrost();
    Interpreter::Type_Integer getresistmagicka();
    Interpreter::Type_Integer getresistnormalweapons();
    Interpreter::Type_Integer getresistparalysis();
    Interpreter::Type_Integer getresistpoison();
    Interpreter::Type_Integer getresistshock();
    Interpreter::Type_Integer getrestoration();
    Interpreter::Type_Float getscale();
    Interpreter::Type_Integer getsecundaphase();
    Interpreter::Type_Integer getsecurity();
    Interpreter::Type_Integer getshortblade();
    Interpreter::Type_Integer getsilence();
    Interpreter::Type_Integer getsneak();
    Interpreter::Type_Integer getsoundplaying(std::string arg0);
    Interpreter::Type_Integer getspear();
    Interpreter::Type_Integer getspeechcraft();
    Interpreter::Type_Integer getspeed();
    Interpreter::Type_Integer getspell(std::string arg0);
    Interpreter::Type_Integer getspelleffects(std::string arg0);
    Interpreter::Type_Integer getspellreadied();
    Interpreter::Type_Float getsquareroot(Interpreter::Type_Float arg0);
    Interpreter::Type_Integer getstandingactor();
    Interpreter::Type_Integer getstandingpc();
    Interpreter::Type_Float getstartingangle(std::string arg0);
    Interpreter::Type_Float getstartingpos(std::string arg0);
    Interpreter::Type_Integer getstat(std::string arg0);
    Interpreter::Type_Integer getstrength();
    Interpreter::Type_Integer getsuperjump();
    Interpreter::Type_Integer getswimspeed();
    Interpreter::Type_Integer gettarget(std::string arg0);
    Interpreter::Type_Integer getunarmored();
    Interpreter::Type_Integer getvanitymodedisabled();
    Interpreter::Type_Integer getwaterbreathing();
    Interpreter::Type_Float getwaterlevel();
    Interpreter::Type_Integer getwaterwalking();
    Interpreter::Type_Integer getweapondrawn();
    Interpreter::Type_Integer getweapontype();
    Interpreter::Type_Integer getwerewolfkills();
    Interpreter::Type_Integer getwillpower();
    Interpreter::Type_Float getwindspeed();
    void goodbye();
    void gotojail();
    Interpreter::Type_Integer hasitemequipped(std::string arg0);
    Interpreter::Type_Integer hassoulgem(std::string arg0);
    Interpreter::Type_Integer hitattemptonme(std::string arg0);
    Interpreter::Type_Integer hitonme(std::string arg0);
    void hurtcollidingactor(Interpreter::Type_Float arg0);
    void hurtstandingactor(Interpreter::Type_Float arg0);
    Interpreter::Type_Integer iswerewolf();
    void journal(std::string arg0, Interpreter::Type_Integer arg1);
    void lock(Interpreter::Type_Integer arg0=-123456);
    void loopgroup(std::string arg0, Interpreter::Type_Integer arg1, Interpreter::Type_Integer arg2=-123456);
    void lowerrank();
    void menutest(Interpreter::Type_Integer arg0=-123456);
    void modacrobatics(Interpreter::Type_Integer arg0);
    void modagility(Interpreter::Type_Integer arg0);
    void modalarm(Interpreter::Type_Integer arg0);
    void modalchemy(Interpreter::Type_Integer arg0);
    void modalteration(Interpreter::Type_Integer arg0);
    void modarmorbonus(Interpreter::Type_Integer arg0);
    void modarmorer(Interpreter::Type_Integer arg0);
    void modathletics(Interpreter::Type_Integer arg0);
    void modattackbonus(Interpreter::Type_Integer arg0);
    void modaxe(Interpreter::Type_Integer arg0);
    void modblindness(Interpreter::Type_Integer arg0);
    void modblock(Interpreter::Type_Integer arg0);
    void modbluntweapon(Interpreter::Type_Integer arg0);
    void modcastpenalty(Interpreter::Type_Integer arg0);
    void modchameleon(Interpreter::Type_Integer arg0);
    void modconjuration(Interpreter::Type_Integer arg0);
    void modcurrentfatigue(Interpreter::Type_Float arg0);
    void modcurrenthealth(Interpreter::Type_Float arg0);
    void modcurrentmagicka(Interpreter::Type_Float arg0);
    void moddefendbonus(Interpreter::Type_Integer arg0);
    void moddestruction(Interpreter::Type_Integer arg0);
    void moddisposition(Interpreter::Type_Integer arg0);
    void modenchant(Interpreter::Type_Integer arg0);
    void modendurance(Interpreter::Type_Integer arg0);
    void modfactionreaction(std::string arg0, std::string arg1, Interpreter::Type_Integer arg2);
    void modfatigue(Interpreter::Type_Float arg0);
    void modfight(Interpreter::Type_Integer arg0);
    void modflee(Interpreter::Type_Integer arg0);
    void modflying(Interpreter::Type_Integer arg0);
    void modhandtohand(Interpreter::Type_Integer arg0);
    void modhealth(Interpreter::Type_Float arg0);
    void modheavyarmor(Interpreter::Type_Integer arg0);
    void modhello(Interpreter::Type_Integer arg0);
    void modillusion(Interpreter::Type_Integer arg0);
    void modintelligence(Interpreter::Type_Integer arg0);
    void modinvisible(Interpreter::Type_Integer arg0);
    void modlightarmor(Interpreter::Type_Integer arg0);
    void modlongblade(Interpreter::Type_Integer arg0);
    void modluck(Interpreter::Type_Integer arg0);
    void modmagicka(Interpreter::Type_Float arg0);
    void modmarksman(Interpreter::Type_Integer arg0);
    void modmediumarmor(Interpreter::Type_Integer arg0);
    void modmercantile(Interpreter::Type_Integer arg0);
    void modmysticism(Interpreter::Type_Integer arg0);
    void modparalysis(Interpreter::Type_Integer arg0);
    void modpccrimelevel(Interpreter::Type_Float arg0);
    void modpcfacrep(Interpreter::Type_Integer arg0, std::string arg1="OPTIONAL_FLAG");
    void modpersonality(Interpreter::Type_Integer arg0);
    void modregion(std::string arg0, Interpreter::Type_Integer arg1=-123456, Interpreter::Type_Integer arg2=-123456, Interpreter::Type_Integer arg3=-123456, Interpreter::Type_Integer arg4=-123456, Interpreter::Type_Integer arg5=-123456, Interpreter::Type_Integer arg6=-123456, Interpreter::Type_Integer arg7=-123456, Interpreter::Type_Integer arg8=-123456, Interpreter::Type_Integer arg9=-123456, Interpreter::Type_Integer arg10=-123456);
    void modreputation(Interpreter::Type_Integer arg0);
    void modresistblight(Interpreter::Type_Integer arg0);
    void modresistcorprus(Interpreter::Type_Integer arg0);
    void modresistdisease(Interpreter::Type_Integer arg0);
    void modresistfire(Interpreter::Type_Integer arg0);
    void modresistfrost(Interpreter::Type_Integer arg0);
    void modresistmagicka(Interpreter::Type_Integer arg0);
    void modresistnormalweapons(Interpreter::Type_Integer arg0);
    void modresistparalysis(Interpreter::Type_Integer arg0);
    void modresistpoison(Interpreter::Type_Integer arg0);
    void modresistshock(Interpreter::Type_Integer arg0);
    void modrestoration(Interpreter::Type_Integer arg0);
    void modscale(Interpreter::Type_Float arg0);
    void modsecurity(Interpreter::Type_Integer arg0);
    void modshortblade(Interpreter::Type_Integer arg0);
    void modsilence(Interpreter::Type_Integer arg0);
    void modsneak(Interpreter::Type_Integer arg0);
    void modspear(Interpreter::Type_Integer arg0);
    void modspeechcraft(Interpreter::Type_Integer arg0);
    void modspeed(Interpreter::Type_Integer arg0);
    void modstrength(Interpreter::Type_Integer arg0);
    void modsuperjump(Interpreter::Type_Integer arg0);
    void modswimspeed(Interpreter::Type_Integer arg0);
    void modunarmored(Interpreter::Type_Integer arg0);
    void modwaterbreathing(Interpreter::Type_Integer arg0);
    void modwaterlevel(Interpreter::Type_Float arg0);
    void modwaterwalking(Interpreter::Type_Integer arg0);
    void modwillpower(Interpreter::Type_Integer arg0);
    void move(std::string arg0, Interpreter::Type_Float arg1);
    void moveworld(std::string arg0, Interpreter::Type_Float arg1);
    Interpreter::Type_Integer onactivate();
    Interpreter::Type_Integer ondeath();
    Interpreter::Type_Integer onknockout();
    Interpreter::Type_Integer onmurder();
    void payfine();
    void payfinethief();
    void pcclearexpelled(std::string arg0="OPTIONAL_FLAG");
    void pcexpell(std::string arg0="OPTIONAL_FLAG");
    Interpreter::Type_Integer pcexpelled(std::string arg0="OPTIONAL_FLAG");
    void pcforce1stperson();
    void pcforce3rdperson();
    Interpreter::Type_Integer pcget3rdperson();
    void pcjoinfaction(std::string arg0="OPTIONAL_FLAG");
    void pclowerrank(std::string arg0="OPTIONAL_FLAG");
    void pcraiserank(std::string arg0="OPTIONAL_FLAG");
    void placeatme(std::string arg0, Interpreter::Type_Integer arg1, Interpreter::Type_Float arg2, Interpreter::Type_Integer arg3);
    void placeatpc(std::string arg0, Interpreter::Type_Integer arg1, Interpreter::Type_Float arg2, Interpreter::Type_Integer arg3);
    void placeitem(std::string arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2, Interpreter::Type_Float arg3, Interpreter::Type_Float arg4);
    void placeitemcell(std::string arg0, std::string arg1, Interpreter::Type_Float arg2, Interpreter::Type_Float arg3, Interpreter::Type_Float arg4, Interpreter::Type_Float arg5);
    void playbink(std::string arg0, Interpreter::Type_Integer arg1);
    void playgroup(std::string arg0, Interpreter::Type_Integer arg1=-123456);
    void playloopsound3d(std::string arg0);
    void playloopsound3dvp(std::string arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2);
    void playsound(std::string arg0);
    void playsound3d(std::string arg0);
    void playsound3dvp(std::string arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2);
    void playsoundvp(std::string arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2);
    void position(Interpreter::Type_Float arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2, Interpreter::Type_Float arg3);
    void positioncell(Interpreter::Type_Float arg0, Interpreter::Type_Float arg1, Interpreter::Type_Float arg2, Interpreter::Type_Float arg3, std::string arg4);
    void ra();
    void raiserank();
    void removeeffects(Interpreter::Type_Integer arg0);
    void removefromlevcreature(std::string arg0, std::string arg1, Interpreter::Type_Integer arg2);
    void removefromlevitem(std::string arg0, std::string arg1, Interpreter::Type_Integer arg2);
    void removeitem(std::string arg0, Interpreter::Type_Integer arg1);
    void removesoulgem(std::string arg0, Interpreter::Type_Integer arg1=-123456);
    void removespell(std::string arg0);
    void removespelleffects(std::string arg0);
    void resetactors();
    void resurrect();
    void rotate(std::string arg0, Interpreter::Type_Float arg1);
    void rotateworld(std::string arg0, Interpreter::Type_Float arg1);
    Interpreter::Type_Integer samefaction();
    void say(std::string arg0, std::string arg1);
    Interpreter::Type_Integer saydone();
    void setacrobatics(Interpreter::Type_Integer arg0);
    void setagility(Interpreter::Type_Integer arg0);
    void setalarm(Interpreter::Type_Integer arg0);
    void setalchemy(Interpreter::Type_Integer arg0);
    void setalteration(Interpreter::Type_Integer arg0);
    void setangle(std::string arg0, Interpreter::Type_Float arg1);
    void setarmorbonus(Interpreter::Type_Integer arg0);
    void setarmorer(Interpreter::Type_Integer arg0);
    void setathletics(Interpreter::Type_Integer arg0);
    void setatstart();
    void setattackbonus(Interpreter::Type_Integer arg0);
    void setaxe(Interpreter::Type_Integer arg0);
    void setblindness(Interpreter::Type_Integer arg0);
    void setblock(Interpreter::Type_Integer arg0);
    void setbluntweapon(Interpreter::Type_Integer arg0);
    void setcastpenalty(Interpreter::Type_Integer arg0);
    void setchameleon(Interpreter::Type_Integer arg0);
    void setconjuration(Interpreter::Type_Integer arg0);
    void setdefendbonus(Interpreter::Type_Integer arg0);
    void setdelete(Interpreter::Type_Integer arg0);
    void setdestruction(Interpreter::Type_Integer arg0);
    void setdisposition(Interpreter::Type_Integer arg0);
    void setenchant(Interpreter::Type_Integer arg0);
    void setendurance(Interpreter::Type_Integer arg0);
    void setfatigue(Interpreter::Type_Float arg0);
    void setfight(Interpreter::Type_Integer arg0);
    void setflee(Interpreter::Type_Integer arg0);
    void setflying(Interpreter::Type_Integer arg0);
    void sethandtohand(Interpreter::Type_Integer arg0);
    void sethealth(Interpreter::Type_Float arg0);
    void setheavyarmor(Interpreter::Type_Integer arg0);
    void sethello(Interpreter::Type_Integer arg0);
    void setillusion(Interpreter::Type_Integer arg0);
    void setintelligence(Interpreter::Type_Integer arg0);
    void setinvisible(Interpreter::Type_Integer arg0);
    void setjournalindex(std::string arg0, Interpreter::Type_Integer arg1);
    void setlevel(Interpreter::Type_Integer arg0);
    void setlightarmor(Interpreter::Type_Integer arg0);
    void setlongblade(Interpreter::Type_Integer arg0);
    void setluck(Interpreter::Type_Integer arg0);
    void setmagicka(Interpreter::Type_Float arg0);
    void setmarksman(Interpreter::Type_Integer arg0);
    void setmediumarmor(Interpreter::Type_Integer arg0);
    void setmercantile(Interpreter::Type_Integer arg0);
    void setmysticism(Interpreter::Type_Integer arg0);
    void setparalysis(Interpreter::Type_Integer arg0);
    void setpccrimelevel(Interpreter::Type_Float arg0);
    void setpcfacrep(Interpreter::Type_Integer arg0, std::string arg1="OPTIONAL_FLAG");
    void setpersonality(Interpreter::Type_Integer arg0);
    void setpos(std::string arg0, Interpreter::Type_Float arg1);
    void setreputation(Interpreter::Type_Integer arg0);
    void setresistblight(Interpreter::Type_Integer arg0);
    void setresistcorprus(Interpreter::Type_Integer arg0);
    void setresistdisease(Interpreter::Type_Integer arg0);
    void setresistfire(Interpreter::Type_Integer arg0);
    void setresistfrost(Interpreter::Type_Integer arg0);
    void setresistmagicka(Interpreter::Type_Integer arg0);
    void setresistnormalweapons(Interpreter::Type_Integer arg0);
    void setresistparalysis(Interpreter::Type_Integer arg0);
    void setresistpoison(Interpreter::Type_Integer arg0);
    void setresistshock(Interpreter::Type_Integer arg0);
    void setrestoration(Interpreter::Type_Integer arg0);
    void setscale(Interpreter::Type_Float arg0);
    void setsecurity(Interpreter::Type_Integer arg0);
    void setshortblade(Interpreter::Type_Integer arg0);
    void setsilence(Interpreter::Type_Integer arg0);
    void setsneak(Interpreter::Type_Integer arg0);
    void setspear(Interpreter::Type_Integer arg0);
    void setspeechcraft(Interpreter::Type_Integer arg0);
    void setspeed(Interpreter::Type_Integer arg0);
    void setstrength(Interpreter::Type_Integer arg0);
    void setsuperjump(Interpreter::Type_Integer arg0);
    void setswimspeed(Interpreter::Type_Integer arg0);
    void setunarmored(Interpreter::Type_Integer arg0);
    void setwaterbreathing(Interpreter::Type_Integer arg0);
    void setwaterlevel(Interpreter::Type_Float arg0);
    void setwaterwalking(Interpreter::Type_Integer arg0);
    void setwerewolfacrobatics();
    void setwillpower(Interpreter::Type_Integer arg0);
    void showmap(std::string arg0);
    void showrestmenu();
    void showvars();
    void skipanim();
    void startcombat(std::string arg0);
    void stopcombat();
    void stopsound(std::string arg0);
    void streammusic(std::string arg0);
    void sv();
    void tai();
    void tcb();
    void tcg();
    void tcl();
    void tfh();
    void tfow();
    void tgm();
    void tm();
    void toggleai();
    void togglecollision();
    void togglecollisionboxes();
    void togglecollisiongrid();
    void togglefogofwar();
    void togglefullhelp();
    void togglegodmode();
    void togglemenus();
    void togglepathgrid();
    void togglesky();
    void togglevanitymode();
    void togglewater();
    void togglewireframe();
    void toggleworld();
    void tpg();
    void ts();
    void turnmoonred();
    void turnmoonwhite();
    void tvm();
    void tw();
    void twa();
    void twf();
    void undowerewolf();
    void unlock();
    void wakeuppc();
    Interpreter::Type_Integer xbox();
}
